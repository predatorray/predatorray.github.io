<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Brume</title>
    <link></link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <description>It's simple. It's easy to use. It's a Jekyll theme.</description>
    <language>en-us</language>
    <pubDate>Sun, 23 Mar 2014 18:34:15 +0800</pubDate>
    <lastBuildDate>Sun, 23 Mar 2014 18:34:15 +0800</lastBuildDate>

    
      <item>
        <title>Demo post</title>
        <link>/demo-post</link>
        <pubDate>Fri, 07 Mar 2014 00:00:00 +0800</pubDate>
        <author>Aigars Dzerviniks</author>
        <description>&lt;p&gt;Praesent tincidunt vestibulum sem nec eleifend. Pellentesque adipiscing mollis adipiscing. Sed ipsum sem, eleifend eget dapibus in, tincidunt ut dolor. Curabitur gravida urna leo, eget auctor turpis feugiat non. Vivamus pharetra, lorem id ullamcorper rutrum, eros erat condimentum erat, ac dignissim lorem nisi nec nunc. Praesent tellus mi, volutpat quis nisl et, consectetur blandit nibh. Nulla sit amet nulla non odio sodales mollis elementum sed sem. Aenean et laoreet enim. Curabitur vulputate, mi rutrum commodo condimentum, enim nunc feugiat magna, vel rutrum sapien ante nec ante. Donec nec nibh placerat, molestie felis ac, vulputate arcu. Donec condimentum pellentesque nibh vel tincidunt. Fusce sem ipsum, varius at laoreet vitae, accumsan sed nisl. Nunc eget viverra diam. Aliquam pulvinar, enim id commodo tincidunt, risus lectus pharetra lacus, et semper enim ligula ut mauris. Sed vitae sollicitudin ante. In sollicitudin placerat dui et sagittis.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Maecenas egestas leo id tortor feugiat, sit amet cursus diam mollis. Nunc sit amet tellus est. Nunc lacus nisl, gravida ut aliquam vel, molestie eget odio. Nulla facilisi. Ut sed libero pharetra nunc volutpat hendrerit. Mauris eget mi adipiscing, congue tellus ut, scelerisque eros. Phasellus ullamcorper dictum tellus nec pretium.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Integer molestie orci ante, nec dictum metus aliquam ut. Donec id tristique enim. Quisque tellus est, dignissim ut justo ac, volutpat fringilla mi. Duis ultricies nec sapien vitae blandit. &lt;strong&gt;Suspendisse sed est mi&lt;/strong&gt;. Mauris varius sapien vel nulla accumsan, id tincidunt ipsum ultrices. Sed eget magna mauris. Etiam porttitor lacus ullamcorper lacus tincidunt aliquam. Sed feugiat congue fringilla. Nunc velit diam, vulputate sed metus vitae, iaculis tempor arcu. Proin consectetur a erat in dignissim.&lt;/p&gt;

&lt;table&gt;&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Tables&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;Are&lt;/th&gt;
&lt;th align=&quot;right&quot;&gt;Cool&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;col 3 is&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;right-aligned&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;$1600&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;col 2 is&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;centered&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;$12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zebra stripes&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;are neat&lt;/td&gt;
&lt;td align=&quot;right&quot;&gt;$1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;p&gt;Pellentesque adipiscing mollis adipiscing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Nulla sit amet nulla non odio sodales mollis elementum sed sem.&lt;/li&gt;
&lt;li&gt;Donec id tristique enim. Quisque tellus est, dignissim ut justo ac, volutpat fringilla mi.&lt;/li&gt;
&lt;li&gt;Nam luctus erat dolor, non viverra nulla varius at.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Curabitur nec ullamcorper dui, blandit aliquet ipsum. Integer suscipit odio quis eros fermentum auctor. Sed tincidunt quam eleifend, egestas erat vulputate, tincidunt metus. Maecenas gravida sodales mi nec posuere. Cras vel nisi condimentum, hendrerit lacus sed, scelerisque ipsum. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Nunc convallis vestibulum erat, quis porta tellus. &lt;em&gt;In lorem erat, sollicitudin varius posuere id, molestie ac eros&lt;/em&gt;. Fusce luctus tellus vitae vulputate venenatis. Sed scelerisque bibendum interdum. Sed pretium commodo ultrices. Fusce luctus quam id porttitor vulputate. Integer ornare consectetur diam eget rutrum. Etiam eget sapien metus.&lt;/p&gt;

&lt;dl&gt;
  &lt;dt&gt;Ornare&lt;/dt&gt;
  &lt;dd&gt;Cras vel nisi condimentum, hendrerit lacus sed, scelerisque ipsum.&lt;/dd&gt;
  &lt;dt&gt;Convallis&lt;/dt&gt;
  &lt;dd&gt;In lorem erat, sollicitudin varius posuere id, molestie ac eros&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;Proin at libero id lorem fermentum elementum quis eget est.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Nam bibendum turpis massa, at accumsan justo fermentum ac.&lt;/li&gt;
&lt;li&gt;Nulla non nulla ut ante condimentum mattis vel at lectus.&lt;/li&gt;
&lt;li&gt;Etiam eget tortor tincidunt, iaculis ligula a, tristique massa. Fusce sed congue lorem, interdum sodales nisl.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Etiam consequat euismod ornare. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas. Nulla pellentesque ipsum vulputate, pellentesque nisl vitae, lacinia sem. Praesent auctor felis et odio ultrices, nec tempor elit lobortis. Etiam ornare massa non risus luctus, id iaculis lacus egestas. Pellentesque massa dolor, mattis id lobortis eget, tristique vitae est.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Nam vulputate leo vitae libero vehicula, id tincidunt velit malesuada. In vel ornare nisi, id semper turpis. Vivamus erat elit, venenatis quis dui at, convallis suscipit sapien. Nunc in nisi scelerisque, aliquam mauris porttitor, facilisis ligula. Vestibulum cursus erat ac turpis bibendum, id pulvinar dolor dapibus. Proin vitae justo et velit imperdiet ultrices id id odio. Cras adipiscing ante vel mauris lobortis rutrum. Aenean eu felis est. In lacinia porttitor risus non sagittis.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Greeter&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;greet&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Greeter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Hello, World&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;john&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greet&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sed imperdiet interdum ultrices. Phasellus iaculis porttitor lorem nec scelerisque. Suspendisse eros urna, adipiscing vel luctus at, feugiat sit amet arcu. Aliquam porttitor ut urna pellentesque sagittis. Donec pellentesque venenatis diam sit amet cursus. Etiam luctus, metus quis gravida fermentum, tortor arcu consequat metus, eget viverra augue risus ac dui. Fusce faucibus scelerisque quam eu sagittis. Sed sit amet sapien non augue lobortis adipiscing. Sed sagittis at lectus eu tempus. Nulla non nulla ut ante condimentum mattis vel at lectus. Nulla ultricies dui et urna semper ultrices. Sed neque ante, dictum in dignissim luctus, facilisis ornare odio. Aenean tempor ultrices magna non pharetra. Curabitur vulputate nec est aliquet suscipit. Etiam ipsum sapien, dictum quis tristique vel, pretium at elit.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Mockito六个简单示例</title>
        <link>/Mockito%E5%85%AD%E4%B8%AA%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B</link>
        <pubDate>Sun, 01 Dec 2013 00:00:00 +0800</pubDate>
        <author>Aigars Dzerviniks</author>
        <description>&lt;p&gt;原文地址：&lt;a href=&quot;http://gojko.net/2009/10/23/mockito-in-six-easy-examples/&quot;&gt;Mockito in six easy examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;原文作者：&lt;a href=&quot;http://gojko.net/author/admin/&quot;&gt;Gojko Adzic&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://mockito.org/&quot;&gt;Mockito&lt;/a&gt;是个奇妙的Java模拟对象（mock）类库。与其他Java或是.NET模拟对象类库相比，我被它简单、易用的特性所吸引。接下来我会列举六个十分简单的例子来帮助你了解Mockit。&lt;/p&gt;

&lt;p&gt;首先，前往&lt;a href=&quot;http://mockito.org/&quot;&gt;主页&lt;/a&gt;下载mockito，把&lt;code&gt;org.mockito.Mockito&lt;/code&gt;类&lt;code&gt;import&lt;/code&gt;（或者使用&lt;code&gt;static import&lt;/code&gt;，下文都使用这种方式）进你的代码中，然后开始感受它的奇妙之处吧。&lt;/p&gt;

&lt;p&gt;使用&lt;code&gt;mock(class)&lt;/code&gt;来创建一个桩（stub）或者一个模拟对象（译者注：关于桩与模拟的区别可以参考Martin Fowler的文章&lt;a href=&quot;http://martinfowler.com/articles/mocksArentStubs.html&quot;&gt;Mocks Aren&amp;#39;t Stubs&lt;/a&gt;）。然后，使用&lt;code&gt;when(mock).thenReturn(value)&lt;/code&gt;来指定这个桩返回的值。如果你指定了不止一个值，这个桩将会顺序返回这些值，直到最后一个将会不变（所以指定一次返回值，这个方法的返回就不会变了）。例如，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;import static org.mockito.Mockito.*;
import static org.junit.Assert.*;
import java.util.Iterator;
import org.junit.Test;
....
    @Test
    public void iterator_will_return_hello_world(){
        //arrange
        Iterator i=mock(Iterator.class);
        when(i.next()).thenReturn(&amp;quot;Hello&amp;quot;).thenReturn(&amp;quot;World&amp;quot;);
        //act
        String result=i.next()+&amp;quot; &amp;quot;+i.next();
        //assert
        assertEquals(&amp;quot;Hello World&amp;quot;, result);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在这个例子中，我们创建了一个模拟的迭代器，第一次调用&lt;code&gt;next()&lt;/code&gt;时返回&lt;code&gt;&amp;quot;Hello&amp;quot;&lt;/code&gt;，第二次返回&lt;code&gt;&amp;quot;World&amp;quot;&lt;/code&gt;。接着我们做一个普通的断言（Assertion）。&lt;/p&gt;

&lt;p&gt;桩当然也可以根据对方法传递的不同参数返回不同的值。例如，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;    @Test
    public void with_arguments(){
        Comparable c=mock(Comparable.class);
        when(c.compareTo(&amp;quot;Test&amp;quot;)).thenReturn(1);
        assertEquals(1,c.compareTo(&amp;quot;Test&amp;quot;));
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;在上面的例子里，我们创建了一个&lt;code&gt;Comparable&lt;/code&gt;的桩对象，当它和一个特定的值进行比较时（这里是&lt;code&gt;&amp;quot;Test&amp;quot;&lt;/code&gt;）返回1。如果你并不能预测到这个方法将会传递的参数，或者你更不关心参数是什么，可以使用&lt;code&gt;anyInt()&lt;/code&gt;（当然还有其他类型的替代）。举个例子，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;    @Test
    public void with_unspecified_arguments(){
        Comparable c=mock(Comparable.class);
        when(c.compareTo(anyInt())).thenReturn(-1);
        assertEquals(-1,c.compareTo(5));
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个&lt;code&gt;Comparable&lt;/code&gt;的桩对象，不管我们传递任何参数，这个方法总是返回-1。如果你的方法是&lt;code&gt;void&lt;/code&gt;型的，这个就有点讨巧了，因为你没法在when中传递这个方法。可以把之前的方式替换成&lt;code&gt;doReturn(result).when(mock_object).void_method_call();&lt;/code&gt;。除了可以指定返回，你还可以使用&lt;code&gt;.thenThrow()&lt;/code&gt;或者&lt;code&gt;doThrow()&lt;/code&gt;。例如，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;    @Test(expected=IOException.class)
    public void OutputStreamWriter_rethrows_an_exception_from_OutputStream() 
            throws IOException{
        OutputStream mock=mock(OutputStream.class);
        OutputStreamWriter osw=new OutputStreamWriter(mock);
        doThrow(new IOException()).when(mock).close();
        osw.close();
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个例子中，当我们调用&lt;code&gt;OutputStream&lt;/code&gt;的&lt;code&gt;close&lt;/code&gt;方法时，会抛出&lt;code&gt;IOException&lt;/code&gt;。我们简单地可以验证，&lt;code&gt;OutputStreamWriter&lt;/code&gt;从包装的输出流（译者注，这边的包装对象使用到的是&lt;a href=&quot;http://en.wikipedia.org/wiki/Decorator_pattern&quot;&gt;装饰器模式&lt;/a&gt;）中重新抛出了这个异常。为了验证相关对象实际的调用（特别被用于模拟对象），我们可以使用&lt;code&gt;verify(mock_object).method.call&lt;/code&gt;。例如，&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;    @Test
    public void OutputStreamWriter_Closes_OutputStream_on_Close()
            throws IOException{
        OutputStream mock=mock(OutputStream.class);
        OutputStreamWriter osw=new OutputStreamWriter(mock);
        osw.close();
        verify(mock).close();
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这个例子将会验证当&lt;code&gt;OutputStreamWriter&lt;/code&gt;被关闭时，是否同时关闭了包装的输出流。就和之前的那个例子一样，通过使用类似&lt;code&gt;anyInt()&lt;/code&gt;的匹配器来匹配方法中的参数。这边要注意，你不能把文本参数（译者注：直接传递具体的参数值）和匹配器参数混合使用，所以如果你使用了多个参数，同时包含了文本参数或是匹配参数。使用&lt;code&gt;eq(value)&lt;/code&gt;匹配器把文本参数转换为匹配参数来作比较。Mockito内建了许多匹配器，但是有时候你需要灵活使用。例如，&lt;code&gt;OutputStreamWriter&lt;/code&gt;会对输出设置缓冲，直到倾倒缓冲的时候才会使用到包装的输出流对象，但是我们不知道究竟这个缓冲有多大，所以我们不能做等价的匹配。我们需要使用我们自己的匹配：&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;text language-text&quot; data-lang=&quot;text&quot;&gt;@Test
public void OutputStreamWriter_Buffers_And_Forwards_To_OutputStream() 
    throws IOException{     
    OutputStream mock=mock(OutputStream.class);
    OutputStreamWriter osw=new OutputStreamWriter(mock);
    osw.write(&amp;#39;a&amp;#39;);
    osw.flush();
    // can&amp;#39;t do this as we don&amp;#39;t know how long the array is going to be
    // verify(mock).write(new byte[]{&amp;#39;a&amp;#39;},0,1);

    BaseMatcher arrayStartingWithA=new BaseMatcher(){
        @Override
        public void describeTo(Description description) {
            // nothing
        }
        // check that first character is A
        @Override
        public boolean matches(Object item) {
            byte[] actual=(byte[]) item;
            return actual[0]==&amp;#39;a&amp;#39;;
        }
    };
    // check that first character of the array is A, and that the other two arguments are 0 and 1
    verify(mock).write(argThat(arrayStartingWithA), eq(0),eq(1));   
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就说到这里，这些已经包含了你所需要了解的基础知识。现在开始深入学习，重构你那些丑陋的&lt;a href=&quot;http://easymock.org/&quot;&gt;easymock&lt;/a&gt;代码吧。&lt;/p&gt;
</description>
      </item>
    

  </channel>
</rss>
